[{"/home/sijoonlee/Documents/RateHub/psychic-succotash/src/components/TodoList.stories.jsx":"1","/home/sijoonlee/Documents/RateHub/psychic-succotash/src/components/TodoList.jsx":"2","/home/sijoonlee/Documents/RateHub/psychic-succotash/src/components/TodoListItem.jsx":"3","/home/sijoonlee/Documents/RateHub/psychic-succotash/src/context/MainContext.js":"4","/home/sijoonlee/Documents/RateHub/psychic-succotash/src/store/TodoStore.js":"5","/home/sijoonlee/Documents/RateHub/psychic-succotash/src/store/TagStore.js":"6","/home/sijoonlee/Documents/RateHub/psychic-succotash/src/components/TagsList.jsx":"7","/home/sijoonlee/Documents/RateHub/psychic-succotash/src/store/AppendingLogStore.js":"8","/home/sijoonlee/Documents/RateHub/psychic-succotash/src/components/AppendingLogView.jsx":"9"},{"size":335,"mtime":1612455983288,"results":"10","hashOfConfig":"11"},{"size":5384,"mtime":1613147804324,"results":"12","hashOfConfig":"11"},{"size":1134,"mtime":1612571102707,"results":"13","hashOfConfig":"11"},{"size":508,"mtime":1613147029437,"results":"14","hashOfConfig":"11"},{"size":2644,"mtime":1613147316525,"results":"15","hashOfConfig":"11"},{"size":1894,"mtime":1613146904546,"results":"16","hashOfConfig":"11"},{"size":1859,"mtime":1613141719946,"results":"17","hashOfConfig":"11"},{"size":516,"mtime":1612557521829,"results":"18","hashOfConfig":"11"},{"size":561,"mtime":1612550327498,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1e58npz",{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/sijoonlee/Documents/RateHub/psychic-succotash/src/components/TodoList.stories.jsx",[],["42","43"],"/home/sijoonlee/Documents/RateHub/psychic-succotash/src/components/TodoList.jsx",["44","45","46","47","48"],"import React, { useState, useRef } from 'react'\nimport { observer } from 'mobx-react'\nimport { observable, autorun, when } from 'mobx';\nimport styled from 'styled-components'\n//import { v4 as uuid} from 'uuid';\n\nimport TagsList from './TagsList'\nimport TodoListItem from './TodoListItem'\nimport AppendingLogView from './AppendingLogView'\n\nimport {TodoStatus, createTodoStore} from '../store/TodoStore'\n\nimport storesContext from '../context/MainContext'\n\nconst useStores = () => React.useContext(storesContext)\n\n\nfunction TodoList({ className }) {\n    const typedTodo = useRef(null);\n\n    //const [ store ] = useState(createTodoStore());\n\n    const { todoStore, appendingLogStore } = useStores();\n    \n    return (\n        <div className={className}>\n            <header>\n                <h1 className=\"title\">TODO List Example</h1>\n            </header>\n            <div className=\"flexContainer\">\n                <section className=\"flexLeft\">\n                    <section>\n                        <input ref={typedTodo}/>\n                        <button onClick={() => {\n                            if(typedTodo.current.value.trim().length > 0) {\n                                todoStore.addItem(typedTodo.current.value.trim())\n                                //appendingLogStore.add(`Todo Item [${typedTodo.current.value.trim()}] added`)\n                            }\n                            typedTodo.current.value = '';\n                        }}>\n                            Add New Item\n                        </button>\n                        <ul>\n                            {todoStore.activeItems.map(item => (\n                                <TodoListItem\n                                    key={item.id}\n                                    name={item.name}\n                                    tags={[...item.tags]}\n                                    status={TodoStatus[item.status]}\n                                    onComplete={() => {\n                                        const before = TodoStatus[item.status]\n                                        todoStore.setStatusNext(item.id)\n                                        const after = TodoStatus[item.status]\n                                        appendingLogStore.add(`Todo Item [${item.name}] Status Changed: ${before} -> ${after}`)\n                                        \n                                    }}\n                                    onChange={(e) => {\n                                        appendingLogStore.add(`Todo Item Name [${item.name}] Changed: ${e}`)\n                                        todoStore.setItemName(item.id, e.target.text)\n                                    }}\n                                    onTagClick={(e) => {\n                                        const tag = e.target.value;\n                                        if(todoStore.hasTag(item.id, tag)){\n                                            todoStore.deleteTag(item.id, tag)\n                                            appendingLogStore.add(`Todo Item [${item.name}]: Tag [${tag}] Deleted`)\n                                        } else {\n                                            todoStore.addTag(item.id, tag)\n                                            appendingLogStore.add(`Todo Item [${item.name}]: Tag [${tag}] Added`)\n                                        }\n                                        \n                                    }}\n                                />\n                            ))}\n                        </ul>\n                    </section>\n                    <section>\n                        <h2 className=\"completedTitle\">Completed Items</h2>\n                        <ul className=\"completedItemList\">\n                            {todoStore.completedItems.map(item => (\n                                <li className=\"completedItem\" key={item.id}>\n                                    <div className=\"completedItemName\">{item.name}</div> \n                                    {[...item.tags].map(t => <div className=\"completedItemTag\">{t}</div>)}\n                                </li>\n                            ))}\n                        </ul>\n                    </section>\n                </section>\n                <section className=\"flexRight\">\n                    <TagsList/>\n                </section>\n\n            </div>\n            <div className=\"\">\n                    <AppendingLogView/>\n            </div>\n            <footer>\n                    \n            </footer>\n        </div>\n    )\n}\n\n\n\n\nexport default styled(observer(TodoList))`\n    background-color: lightgray;\n\n    .title {\n        color: orange;\n    }\n    .flexContainer{\n        height:80vh;\n        display:flex;\n        flex-direction:row;\n    }\n    .flexLeft, .flexRight{\n        width:50%\n    }\n    ul{\n        list-style-type:none;\n    }\n    .completedItem{\n        display:flex;\n        flex-direction:row;\n        flex-wrap:wrap;\n        background:white;\n        border: black 1px solid;\n        border-radius:3px;\n        margin:2px;\n        padding:2px 4px;\n\n    }\n    .completedItemName{\n        font-size:1em;\n        font-weight:bold;\n        width:100%;\n    }\n    .completedItemTag{\n        font-size:0.8em;\n        border: black 1px solid;\n        border-radius:3px;\n        padding: 1px 2px;\n        margin: 2px;\n        background-color: #E9C46A;\n\n    }\n`\n","/home/sijoonlee/Documents/RateHub/psychic-succotash/src/components/TodoListItem.jsx",[],"/home/sijoonlee/Documents/RateHub/psychic-succotash/src/context/MainContext.js",[],"/home/sijoonlee/Documents/RateHub/psychic-succotash/src/store/TodoStore.js",[],"/home/sijoonlee/Documents/RateHub/psychic-succotash/src/store/TagStore.js",[],"/home/sijoonlee/Documents/RateHub/psychic-succotash/src/components/TagsList.jsx",[],["49","50"],"/home/sijoonlee/Documents/RateHub/psychic-succotash/src/store/AppendingLogStore.js",["51","52","53"],"import { observable, when, autorun, getDependencyTree  } from 'mobx';\n\nfunction createAppendingLogStore(){\n    const self = observable({\n        logs: [\n            {\n                message:\"init\", // string\n                time:(new Date()).toString() // timestamp string\n            }\n        ],\n        add(message){\n            self.logs.push({message, time: (new Date()).toString()})\n        },\n        get(){\n            return self.logs\n        }\n    })\n\n    return self;\n}\n\nexport {createAppendingLogStore};","/home/sijoonlee/Documents/RateHub/psychic-succotash/src/components/AppendingLogView.jsx",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"62","line":3,"column":10,"nodeType":"60","messageId":"61","endLine":3,"endColumn":20},{"ruleId":"58","severity":1,"message":"63","line":3,"column":22,"nodeType":"60","messageId":"61","endLine":3,"endColumn":29},{"ruleId":"58","severity":1,"message":"64","line":3,"column":31,"nodeType":"60","messageId":"61","endLine":3,"endColumn":35},{"ruleId":"58","severity":1,"message":"65","line":11,"column":21,"nodeType":"60","messageId":"61","endLine":11,"endColumn":36},{"ruleId":"54","replacedBy":"66"},{"ruleId":"56","replacedBy":"67"},{"ruleId":"58","severity":1,"message":"64","line":1,"column":22,"nodeType":"60","messageId":"61","endLine":1,"endColumn":26},{"ruleId":"58","severity":1,"message":"63","line":1,"column":28,"nodeType":"60","messageId":"61","endLine":1,"endColumn":35},{"ruleId":"58","severity":1,"message":"68","line":1,"column":37,"nodeType":"60","messageId":"61","endLine":1,"endColumn":54},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'observable' is defined but never used.","'autorun' is defined but never used.","'when' is defined but never used.","'createTodoStore' is defined but never used.",["69"],["70"],"'getDependencyTree' is defined but never used.","no-global-assign","no-unsafe-negation"]